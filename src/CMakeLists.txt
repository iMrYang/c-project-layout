# name
set(CPROJECT_NAME               cproject)
# include
set(CPROJECT_INCLUDE_DIRECTORY  ${CMAKE_CURRENT_LIST_DIR}/)
# source
cproject_aux_source_directory(${CMAKE_CURRENT_LIST_DIR} CPROJECT_SOURCE_FILES)

# shared library
if (CPROJECT_BUILD_SHARED_LIBS)
  # config
  set(CPROJECT_SHARED_LIBRARY           ${CPROJECT_NAME}_shared)
  set(CPROJECT_SHARED_OUTPUT_DIRECTORY  ${CMAKE_BINARY_DIR}/${CPROJECT_SHARED_LIBRARY}.dir/)

  # target library
  add_library(${CPROJECT_SHARED_LIBRARY} SHARED ${CPROJECT_SOURCE_FILES})
  # target library add define
  target_compile_definitions(${CPROJECT_SHARED_LIBRARY} PUBLIC -DCPROJECT_API=${CPROJECT_EXTERN_SYMBOL})
  # target library include directories
  target_include_directories(${CPROJECT_SHARED_LIBRARY} PUBLIC ${CPROJECT_INCLUDE_DIRECTORY} ${CPROJECT_DEPS_INCLUDE_DIRS})
  # target library link third party libraries
  target_link_libraries(${CPROJECT_SHARED_LIBRARY} ${CPROJECT_DEPS_LIBS})
  # target library add depends
  add_dependencies(${CPROJECT_SHARED_LIBRARY} ${CPROJECT_DEPS_TARGETS})
  # target library cmake config
  set_target_properties(${CPROJECT_SHARED_LIBRARY} PROPERTIES
    # target output name
    OUTPUT_NAME                       ${CPROJECT_NAME}
    # target output directory
    ARCHIVE_OUTPUT_DIRECTORY          ${CPROJECT_SHARED_OUTPUT_DIRECTORY}
    LIBRARY_OUTPUT_DIRECTORY          ${CPROJECT_SHARED_OUTPUT_DIRECTORY}
    RUNTIME_OUTPUT_DIRECTORY          ${CPROJECT_SHARED_OUTPUT_DIRECTORY}
    ARCHIVE_OUTPUT_DIRECTORY_DEBUG    ${CPROJECT_SHARED_OUTPUT_DIRECTORY}
    LIBRARY_OUTPUT_DIRECTORY_DEBUG    ${CPROJECT_SHARED_OUTPUT_DIRECTORY}
    RUNTIME_OUTPUT_DIRECTORY_DEBUG    ${CPROJECT_SHARED_OUTPUT_DIRECTORY}
    ARCHIVE_OUTPUT_DIRECTORY_RELEASE  ${CPROJECT_SHARED_OUTPUT_DIRECTORY}
    LIBRARY_OUTPUT_DIRECTORY_RELEASE  ${CPROJECT_SHARED_OUTPUT_DIRECTORY}
    RUNTIME_OUTPUT_DIRECTORY_RELEASE  ${CPROJECT_SHARED_OUTPUT_DIRECTORY}
    # clean and rebuild
    CLEAN_DIRECT_OUTPUT               True
  )
  # target library install config
  install(TARGETS ${CPROJECT_SHARED_LIBRARY} DESTINATION lib)
endif()

# static library
if (CPROJECT_BUILD_STATIC_LIBS)
  # config
  set(CPROJECT_STATIC_LIBRARY           ${CPROJECT_NAME}_static)
  set(CPROJECT_STATIC_OUTPUT_DIRECTORY  ${CMAKE_BINARY_DIR}/${CPROJECT_STATIC_LIBRARY}.dir/)

  # target library
  add_library(${CPROJECT_STATIC_LIBRARY} STATIC ${CPROJECT_SOURCE_FILES})
  # target library add define
  target_compile_definitions(${CPROJECT_STATIC_LIBRARY} PUBLIC -DCPROJECT_API=${CPROJECT_EXTERN_SYMBOL})
  # target library include directories
  target_include_directories(${CPROJECT_STATIC_LIBRARY} PUBLIC ${CPROJECT_INCLUDE_DIRECTORY} ${CPROJECT_DEPS_INCLUDE_DIRS})
  # target library link third party libraries
  target_link_libraries(${CPROJECT_STATIC_LIBRARY} ${CPROJECT_DEPS_LIBS})
  # target library add depends
  add_dependencies(${CPROJECT_STATIC_LIBRARY} ${CPROJECT_DEPS_TARGETS})
  # target library cmake config
  set_target_properties(${CPROJECT_STATIC_LIBRARY} PROPERTIES
    # target output name
    OUTPUT_NAME                       ${CPROJECT_NAME}$<$<BOOL:${CPROJECT_BUILD_SHARED_LIBS}>:_static>
    # target output directory
    ARCHIVE_OUTPUT_DIRECTORY          ${CPROJECT_STATIC_OUTPUT_DIRECTORY}
    LIBRARY_OUTPUT_DIRECTORY          ${CPROJECT_STATIC_OUTPUT_DIRECTORY}
    RUNTIME_OUTPUT_DIRECTORY          ${CPROJECT_STATIC_OUTPUT_DIRECTORY}
    ARCHIVE_OUTPUT_DIRECTORY_DEBUG    ${CPROJECT_STATIC_OUTPUT_DIRECTORY}
    LIBRARY_OUTPUT_DIRECTORY_DEBUG    ${CPROJECT_STATIC_OUTPUT_DIRECTORY}
    RUNTIME_OUTPUT_DIRECTORY_DEBUG    ${CPROJECT_STATIC_OUTPUT_DIRECTORY}
    ARCHIVE_OUTPUT_DIRECTORY_RELEASE  ${CPROJECT_STATIC_OUTPUT_DIRECTORY}
    LIBRARY_OUTPUT_DIRECTORY_RELEASE  ${CPROJECT_STATIC_OUTPUT_DIRECTORY}
    RUNTIME_OUTPUT_DIRECTORY_RELEASE  ${CPROJECT_STATIC_OUTPUT_DIRECTORY}
    # clean and rebuild
    CLEAN_DIRECT_OUTPUT               True
  )
  # target library install config
  install(TARGETS ${CPROJECT_STATIC_LIBRARY} DESTINATION lib)
endif()
